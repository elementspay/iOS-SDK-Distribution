// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ElementsActions
import Elements
@_exported import ElementsActions
import Foundation
import SafariServices
import Swift
import UIKit
final public class RedirectComponent : ElementsActions.ActionComponent {
  public enum Error : Swift.Error {
    case appNotFound
    public static func == (a: ElementsActions.RedirectComponent.Error, b: ElementsActions.RedirectComponent.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  weak final public var delegate: ElementsActions.ActionComponentDelegate?
  weak final public var presentationDelegate: Elements.PresentationDelegate?
  public init(style: ElementsActions.RedirectComponentStyle? = nil)
  final public func handle(_ action: Elements.RedirectAction)
  @discardableResult
  public static func applicationDidOpen(from url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
extension RedirectComponent : ElementsActions.ActionComponentDelegate {
  final public func didProvide(_ data: ElementsActions.ActionComponentData, from component: ElementsActions.ActionComponent)
  final public func didComplete(from component: ElementsActions.ActionComponent)
  final public func didFail(with error: Swift.Error, from component: ElementsActions.ActionComponent)
  final public func didOpenExternalApplication(_ component: ElementsActions.ActionComponent)
}
final public class ElementsActionComponent : ElementsActions.ActionComponent, Elements.Localizable {
  weak final public var delegate: ElementsActions.ActionComponentDelegate?
  weak final public var presentationDelegate: Elements.PresentationDelegate?
  final public var redirectComponentStyle: ElementsActions.RedirectComponentStyle?
  final public var awaitComponentStyle: ElementsActions.AwaitComponentStyle?
  final public var localizationParameters: Elements.LocalizationParameters?
  public init()
  final public func handle(_ action: Elements.Action)
  @objc deinit
}
public struct AwaitComponentStyle : Elements.ViewStyle {
  public var image: Elements.ImageStyle
  public var message: Elements.TextStyle
  public var spinnerTitle: Elements.TextStyle
  public var backgroundColor: UIKit.UIColor
  public init()
}
public protocol ElementsViewControllerPresentingDelegate : AnyObject {
  func requestToShow(viewController: UIKit.UIViewController)
  func requestToDismiss()
}
public protocol ElementsActionCompletionDelegate : AnyObject {
  func didFail(with error: Swift.Error, driver: ElementsActions.ElementsActionDriver)
  func didSuccess(with token: Swift.String?, driver: ElementsActions.ElementsActionDriver)
}
final public class ElementsActionDriver : Elements.Component {
  final public class Configuration {
    final public let environment: Elements.Environment
    final public let returnURLScheme: Swift.String
    final public let style: ElementsActions.RedirectComponentStyle?
    public init(environment: Elements.Environment, returnURLScheme: Swift.String, style: ElementsActions.RedirectComponentStyle? = nil)
    @objc deinit
  }
  weak final public var presentingDelegate: ElementsActions.ElementsViewControllerPresentingDelegate?
  weak final public var completionDelegate: ElementsActions.ElementsActionCompletionDelegate?
  public init(configuration: ElementsActions.ElementsActionDriver.Configuration, completionDelegate: ElementsActions.ElementsActionCompletionDelegate? = nil, presentingDelegate: ElementsActions.ElementsViewControllerPresentingDelegate? = nil)
  final public func requestPaypalSetup()
  final public func requestKakaoPaySetup()
  @objc deinit
}
extension ElementsActionDriver : ElementsActions.ActionComponentDelegate {
  final public func didProvide(_ data: ElementsActions.ActionComponentData, from component: ElementsActions.ActionComponent)
  final public func didComplete(from component: ElementsActions.ActionComponent)
  final public func didFail(with error: Swift.Error, from component: ElementsActions.ActionComponent)
}
extension ElementsActionDriver : Elements.PresentationDelegate {
  final public func present(component: Elements.PresentableComponent)
}
public struct RedirectDetails : Elements.AdditionalDetails {
  public let returnURL: Foundation.URL
  public init(returnURL: Foundation.URL)
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias URLHandler = (Foundation.URL) -> Swift.Void
public enum RedirectListener {
  public static func registerForURL(using handler: @escaping ElementsActions.URLHandler)
}
public struct RedirectComponentStyle {
  public let preferredBarTintColor: UIKit.UIColor?
  public let preferredControlTintColor: UIKit.UIColor
  public let modalPresentationStyle: UIKit.UIModalPresentationStyle
  public init(preferredBarTintColor: UIKit.UIColor? = nil, preferredControlTintColor: UIKit.UIColor = .systemBlue, modalPresentationStyle: UIKit.UIModalPresentationStyle = .formSheet)
}
public protocol ActionComponent : Elements.Component {
  var delegate: ElementsActions.ActionComponentDelegate? { get set }
}
public protocol ActionComponentDelegate : AnyObject {
  func didOpenExternalApplication(_ component: ElementsActions.ActionComponent)
  func didProvide(_ data: ElementsActions.ActionComponentData, from component: ElementsActions.ActionComponent)
  func didComplete(from component: ElementsActions.ActionComponent)
  func didFail(with error: Swift.Error, from component: ElementsActions.ActionComponent)
}
extension ActionComponentDelegate {
  public func didOpenExternalApplication(_: ElementsActions.ActionComponent)
}
public struct ActionComponentData {
  public let details: Elements.AdditionalDetails
  public let paymentData: Swift.String?
  public init(details: Elements.AdditionalDetails, paymentData: Swift.String?)
}
extension ElementsActions.RedirectComponent.Error : Swift.Equatable {}
extension ElementsActions.RedirectComponent.Error : Swift.Hashable {}
